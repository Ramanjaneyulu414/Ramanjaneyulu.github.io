# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UvFluurCBNxNeDHw7Enl17w7KsvyQ5m7
"""

import pandas as pd
import numpy as np

# Replace '/path/to/your/file/Re-selling items.csv' with the actual path to your file
# Based on the provided file list, it seems the file is located at '/content/Re-selling items.csv'
# Make sure to upload the "Re-selling items.csv" file to your Colab environment.
try:
    df = pd.read_csv("/content/Re-selling items.csv") # Corrected filename

    df['Invoice'] = range(94, 94 + len(df))
    df["Quantity"] = np.random.randint(1, 11, size=len(df))

    # Ensure 'Price' column is numeric before calculation
    if "Price" in df.columns:
        df["Price"] = pd.to_numeric(df["Price"], errors='coerce')
        df["TotalAmount"] = df["Quantity"] * df["Price"]
    elif "price" in df.columns: # Check for both 'Price' and 'price'
        df["price"] = pd.to_numeric(df["price"], errors='coerce')
        df["TotalAmount"] = df["Quantity"] * df["price"]
    else:
        print("Warning: Neither 'Price' nor 'price' column found. Cannot calculate TotalAmount.")
        df["TotalAmount"] = np.nan # Set TotalAmount to NaN if price column is missing


    print("DataFrame with quantity and invoice columns added:")
    display(df.head()) # Display the head of the DataFrame

    print('Missing values count:')
    print(df.isnull().sum(), "\n")

    print("Duplicate rows:")
    print(df[df.duplicated()], "\n")

    print("DataFrame with TotalAmount column:")
    display(df.head()) # Display the head again to show TotalAmount

except FileNotFoundError:
    print("Error: The file '/content/Re-selling items.csv' was not found. Please ensure the file is uploaded to the correct location.")

#Exercise:2(Simple Exploratory Analysis)
#Total sales Amount
print("DataFrame with TotalAmount:")
total_sales = df["TotalAmount"].sum()
print("Total Sales Amount:", total_sales)
#Most Sold Product:
# Changed "Product" to "Product_name"
product_sales = df.groupby("Product_name")["Quantity"].sum().reset_index()
most_sold = product_sales.loc[product_sales["Quantity"].idxmax()]
print("Total Quantity Sold per Product:")
print(product_sales, "\n")
print("Most Sold Product:")
print(most_sold)
print("\n")
#Most Average Order Value:
print("Most Average Order Value:")
total_revenue = df["TotalAmount"].sum()
num_orders = df["Invoice"].nunique() # Corrected to use 'Invoice' column for number of orders
aov = total_revenue / num_orders
print("Total Revenue:", total_revenue)
print("Number of Orders:", num_orders)
print("Average Order Value (AOV):", aov)
print("\n")
#Total no of unique customers - This dataset does not have a CustomerID column, skipping this calculation.
# unique_customers = df["CustomerID"].nunique()
# print("Total Unique Customers:", unique_customers)
# print("\n")

#Exercise:3(Data Visualaization)
#The Bar Chart
import matplotlib.pyplot as plt # Import matplotlib

plt.figure(figsize=(8,5))
# To get the top 10 products by sales, we need to sort product_sales by 'Quantity' and select the top 10
top_10_products = product_sales.sort_values(by='Quantity', ascending=False).head(10)
top_10_products.plot(kind="bar", color="skyblue", edgecolor="black")

plt.title("Top 10 Products by Quantity Sold", fontsize=14) # Updated title to reflect quantity
plt.xlabel("Product", fontsize=12)
plt.ylabel("Total Quantity Sold", fontsize=12) # Updated y-label
plt.xticks(rotation=45, ha='right') # Adjusted rotation and alignment for better readability
plt.tight_layout() # Adjust layout to prevent labels overlapping
plt.show()
print("\n")

# The Line Chart - This part of the code is removed because 'Invoice Date' column is missing.
# print("The Line Chart:")
# df['Invoice Month'] = df['Invoice Date'].dt.to_period('M')
# monthly_sales = df.groupby('Invoice Month')['TotalAmount'].sum()
# plt.figure(figsize=(8,5))
# plt.plot(monthly_sales.index.astype(str), monthly_sales.values, marker="o", linestyle="-", color="blue")

# plt.title("Monthly Sales Trends", fontsize=14)
# plt.xlabel("Month", fontsize=12)
# plt.ylabel("Total Sales", fontsize=12)
# plt.grid(True, linestyle="--", alpha=0.6)
# plt.xticks(rotation=45)
# plt.tight_layout()
# plt.show()
# print(df)
# print("\n")

#The Pie chart
print("The Pie Chart:")
# The original data does not have a 'Country' column. Assuming 'Address' can be used for geographical distribution analysis.
# If you have a 'Country' column in your actual data, replace 'Address' with 'Country'.
if 'Address' in df.columns:
    address_sales = df.groupby('Address')['TotalAmount'].sum().sort_values(ascending=False)
    top5_addresses = address_sales.head(5)
    plt.figure(figsize=(6,6))
    plt.pie(top5_addresses,
            labels=top5_addresses.index,
            autopct="%1.1f%%",
            startangle=140,
            colors=plt.cm.Paired.colors)

    plt.title("Sales Distribution by Address (Top 5)", fontsize=14) # Updated title to reflect Address
    plt.show()
else:
    print("Warning: Neither 'Country' nor 'Address' column found. Cannot generate Pie Chart.")

print("\n")

#Exerice:4(Insights)
print("Insights of the Business:")
print("""1.Top Market Contributors:The chart highlights the top 5 countries generating the highest sales revenue, showing which markets are most valuable.
2.Percentage Share:Each slice shows the percentage of total sales contributed by that country, helping identify market dominance.
3.Market Concentration:If one or two countries take up a large portion, it means revenue is heavily dependent on those markets (higher risk if demand drops there).
4.Growth Opportunities:Countries with smaller slices among the top 5 may represent emerging markets where the business can increase sales with better marketing strategies.
5.Resource Allocation:Businesses can decide where to focus resources (inventory, marketing, distribution) based on which countries contribute most to revenue.
6.Strategic Planning:Helps in geographical expansion planning: top contributors must be retained, while underperforming countries may need additional attention to boost sales.""")